var scanlines = $(".scanlines");
var tv = $(".tv");
var anim = false;

var valid_paths = [
    "Documents",
    "Documents/contact.txt",
    "Documents/resume.txt",
    "Documents/projects.txt",
    "exploits",
    "exploits/README"
];

var devbox = new (function() {
    this.fs = {
        "": {
            "type": "d",
            "home": {
                "type": "d",
                "dev": {
                    "type": "d",
                    "Documents":{
                        "type": "d",
                        "contact.txt":{
                            "type": "f"
                        },
                        "resume.txt":{
                            "type": "f"
                        },
                        "projects.txt":{
                            "type": "f"
                        },
                        "type": "d"
                    },
                    "exploits":{
                        "type": "d",
                        "README": {
                            "type": "f"
                        }
                    },
                },
            },
            "root": {
                "type": "d",
                "challenge": {
                    "type": "f"
                },
                ".stage0": {"type": "f"},
            },
        },
    };
    this.stack = ["", "home", "dev"];

    this.getCurrentPath = function(){
        var path = this.stack.join('/');
        if (path === ""){
            return "/";
        }
        return path;
    },
    this.getCurrentWorkingDirectory = function(){
        var fs = this.fs;
        for(var f in this.stack){
            fs = fs[this.stack[f]];
        }
        return fs;
    };
})();

function get_file(path, type, term) {
    var valid_path = true;
    
    path = path.trim() ? path : "";
    if (!path){
        return;
    }

    // If fullpath move to root
    var start_path = devbox.stack;
    if (path.startsWith("/")) {
        if (path === "/"){
            path = "";
        } else {
            path = path.endsWith("/") ? path.substring(1, path.length - 1) : path.substring(1, path.length);
        }
        devbox.stack = [""];
    }
    path = path.endsWith("/") ? path.substring(1, path.length - 1) : path;


    // Get filename and remove from list
    var path_dirs = path.split("/");
    var file_name = path_dirs[path_dirs.length - 1];
    path_dirs.pop();

    var cwd;
    for(i in path_dirs){
        cwd = devbox.getCurrentWorkingDirectory();
        if (!cwd){
            valid_path = false;
            break;
        }
        var item = cwd[path_dirs[i]];
        if (!item){
            valid_path = false;
        }

        if (cwd && item){
            devbox.stack.push(path_dirs[i]);
        }
    }

    cwd = devbox.getCurrentWorkingDirectory();
    var item = cwd[file_name];
    if (!valid_path || !item){
        term.echo("cat: "+path+": No such file or directory");
        return;
    } else if (item["type"] == "d"){
        term.echo("cat: "+path+": Is a directory");
        return;
    }

    path = devbox.getCurrentPath() + "/" + file_name
    path = path.startsWith("/") ? path.substring(1, path.length) : path;

    console.log(path);
    // fix stack
    if (path_dirs.length > 0 && path){
        for(d in path_dirs){
            devbox.stack.pop();
        }
    }

    term.pause();
    $.get(path).then(file => {
        term.resume();
        if (type === "cat") {
            term.echo(file.split("\n"));
        } else if (type === "less") {
            term.less(file.split("\n"));
        }
    });

    devbox.stack = start_path;

}

function set_size() {
    var height = $(window).height() * 0.2;
    var width = $(window).width() * 0.8;
    var time = (height * 2) / 170;
    scanlines[0].style.setProperty("--time", time);
    tv[0].style.setProperty("--width", width);
    tv[0].style.setProperty("--height", height);
}

function typed(finish_typing) {
    return function(term, message, delay, finish) {
        anim = true;
        var prompt = term.get_prompt();
        var c = 0;
        if (message.length > 0) {
            term.set_prompt("");
            var new_prompt = "";
            var interval = setInterval(function() {
                var chr = $.terminal.substring(message, c, c+1);
                new_prompt += chr;
                term.set_prompt(new_prompt);
                c++
                if (c == length(message)) {
                    clearInterval(interval);
                    setTimeout(function() {
                        finish_typing(term, message, prompt);
                        anim = false
                        finish && finish();
                    }, delay);
                }
            }, delay);
        }
    };
}

function length(string) {
    string = $.terminal.strip(string);
    return $("<span>" + string + "</span>").text().length;
}

var typed_prompt = typed(function(term, message, prompt){
    term.set_prompt(message + " ");
});
var typed_message = typed(function(term, message, prompt){
    term.echo(message);
    term.set_prompt(prompt);
});
    
